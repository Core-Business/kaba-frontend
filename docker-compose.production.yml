version: '3.8'

services:
  # ========================================
  # DATABASE SERVICES
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: kaba-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kaba_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-kaba_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kaba-network

  mongodb:
    image: mongo:7-jammy
    container_name: kaba-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-kaba}
    volumes:
      - mongodb_data:/data/db
      - ./backups:/backups
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kaba-network

  # ========================================
  # STORAGE SERVICE
  # ========================================
  minio:
    image: minio/minio:latest
    container_name: kaba-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - kaba-network

  # ========================================
  # APPLICATION SERVICES
  # ========================================
  backend:
    build:
      context: ./kaba-backend
      dockerfile: Dockerfile
    container_name: kaba-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      NODE_ENV: production
      POSTGRES_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-kaba_db}
      MONGODB_URI: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password}@mongodb:27017/${MONGO_DB:-kaba}?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      ENABLE_RLS: true
      DEFAULT_ORG_NAME: "KABA Default"
      DEFAULT_WORKSPACE_NAME: "Main Workspace"
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - kaba-network

  frontend:
    build:
      context: ./kaba-frontend
      dockerfile: Dockerfile
    container_name: kaba-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3000/api}
    ports:
      - "9002:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - kaba-network

  # ========================================
  # REVERSE PROXY (NGINX)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: kaba-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - kaba-network

# ========================================
# NETWORKS AND VOLUMES
# ========================================
networks:
  kaba-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  minio_data:
    driver: local 